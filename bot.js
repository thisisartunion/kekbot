const Discord = require("discord.js");
const fs = require("fs");
const moment = require(`moment`);
const client = new Discord.Client();
const isImageUrl = require("is-image-url");
const token = "";
const logger = fs.createWriteStream("setmsgslog.txt", {
  flags: "a",
});
const Unb = require(`unb-api`).Client;
const unb = new Unb(
  ``
);
const deet = new Date();
const prefix = "kek!";
var space = " ";
var postime;
var time;
var series = 1;
var date;
var dateprefix;
var month;
var year;
var currentrequest;
var monthtime;
var timeseries = 0;
var endofthemonth;
themesarray = [];
currentarray = [];
var noticeusrsusrs = [];
const noticembed = new Discord.MessageEmbed()
  .setColor("#FFDAB9")
  .setTitle(`***Hello there, here's a quick notice!***  `)
  .setAuthor("Art Union", "https://i.imgur.com/yW3w6m4.gif")
  .setDescription(
    `\nWe noticed that you've just posted on commission-request, we'd like to remind you to: \n1. Read the commission rules and follow the format\n2. Choose an artist only *after* the deadline\n3. Pm the artist(s) you chose and *close* the request by editing it\n4. *Announce* who is the chosen artist that you will work with\n\nThanks~\n`
  )
  .setThumbnail("https://i.imgur.com/yW3w6m4.gif")
  .setFooter(
    `Art Union, Fart Onion \nthis content was generated by a bot, so uh, don't reply to it ig lmao`,
    "https://i.imgur.com/yW3w6m4.gif"
  );
roleindex = ["713316004264149073", "717386503495483464", "716990261779234929"];


async function msggetter(channel, limit = 500) {
  const sum_messages = [];
  let last_id;

  while (true) {
    const options = { limit: 100 };
    if (last_id) {
      options.before = last_id;
    }

    const messages = await channel.messages.fetch(options);
    sum_messages.push(...messages.array());
    if (messages.array().length > 0) {
      last_id = messages.last().id;
    }

    if (messages.size != 100 || sum_messages >= limit) {
      break;
    }
  }

  return sum_messages;
}

function onlyUnique(value, index, self) {
  return self.indexOf(value) === index;
}

function login() {
  client.login(token).catch(() => {
    console.log(`${moment().toDate()}: Login failed! Retrying...`);
    setTimeout(() => {
      login();
    }, 6000);
  });
}

login();

client.on(`ready`, () => {
  console.log(
    `${moment().toDate()}: ${client.user.tag} v${
      require("./package.json").version
    }.6 ready!`
  );
});

client.on("message", (message) => {
  function isLeapYear(year) {
    if (year % 400 === 0) return true;
    if (year % 100 === 0) return false;
    return year % 4 === 0;
  }
  function Monthver() {
    console.log(typeof month);
    switch (month.toLowerCase()) {
      case "january":
        if (isLeapYear(year) == true) {
          endofthemonth = 29;
        } else if (isLeapYear(year) == false) {
          endofthemonth = 28;
        }
        month = "February";
        break;
      case "february":
        endofthemonth = 31;
        month = "March";
        break;
      case "march":
        endofthemonth = 30;
        month = "April";
        break;
      case "april":
        endofthemonth = 31;
        month = "May";
        break;
      case "may":
        endofthemonth = 30;
        month = "June";
        break;
      case "june":
        endofthemonth = 31;
        month = "July";
        break;
      case "july":
        endofthemonth = 31;
        month = "August";
        break;
      case "august":
        endofthemonth = 30;
        month = "September";
        break;
      case "september":
        endofthemonth = 31;
        month = "October";
        break;
      case "october":
        endofthemonth = 30;
        month = "November";
        break;
      case "november":
        endofthemonth = 31;
        month = "December";
        break;
      case "december":
        endofthemonth = 31;
        if (!isNaN(year)) {
          year = parseInt(year, 10);
          year += 1;
        }
        year.toString();
        month = "January";
        break;
    }
  }
  function addZero(i) {
    if (i < 10) {
      i = "0" + i;
    }
    return i;
  }
  var authormsg = `${message.author.username}  ${message.author.tag}`;
  var newdatething = new Date();
  var curhour = addZero(newdatething.getHours());
  var curminute = addZero(newdatething.getMinutes());
  var curd8 =
    addZero(newdatething.getDate()) +
    "/" +
    addZero(newdatething.getMonth()) +
    "/" +
    newdatething.getFullYear();
  var currentteem = `${curd8} ${curhour}:${curminute}`;
  const ifmsg = "the if message was sent to ";
  var wholeauthmsg = currentteem + ": " + ifmsg + authormsg;
  const args = message.content.slice(prefix.length).trim().split(/ +/g);
  const command = args.shift().toLowerCase();
  const splitreq = message.content.slice(prefix.length).trim().split(/, +/g);
  const commissionchannels = [
    "740834692151902278",
    "719341504966951002",
    "717334614535831663",
    "716994589122363392",
    "770909960665432064",
  ];
  if (message.author.bot) {
    return;
  }

  if (
    message.channel.id == commissionchannels[3] ||
    (message.channel.id == commissionchannels[4] &&
      noticeusrsusrs.indexOf(message.author.id) == -1)
  ) {
    if (message.content.split("\n").length > 3) {
      splitkreck = message.content.split("\n");
      splitkreckreck = splitkreck[2].split(" ");
      splitkreckreckreck = splitkreckreck.shift();
      splitkrekend = splitkreckreck.join(" ");
      splitgn = splitkreck[0].split(" ");
      splitgngn = splitgn.shift();
      splitgnend = splitgn.join(" ");
      splittp = splitkreck[1].split(" ");
      splittptp = splittp.shift();
      splittpend = splittp.join(" ");
      console.log(
        `${currentteem}= ${message.author.tag}, (IGN:${splitgnend}) requested a ${splittpend}: "${splitkrekend}" in commission-request`
      );
    }
    message.author.send(noticembed);
    noticeusrsusrs.push(message.author.id);
  }

  if (
    message.author.bot ||
    commissionchannels.indexOf(message.channel.id) != -1 ||
    message.guild === null
  ) {
    return;
  } else if (
    message.attachments.array().length > 0 ||
    message.content.split(`\n`).length >= 3 ||
    message.content.includes(`http`) ||
    message.content.includes(`https`) ||
    message.content.includes(`www.`) ||
    message.content.includes(`.com`)
  ) {
    if (
      message.channel.name.toLowerCase().includes(`portfolio`) &&
      message.channel.position != 0
    ) {
      message.channel.setPosition(0);
    }
  }
  const roleCheck = message.member.roles.cache.some((role) =>
    roleindex.includes(role.id)
  );

  if (roleCheck == false || !message.content.startsWith(prefix)) {
    return;
  } else if (command == `portfolio`) {
    function getUserFromMention(mention) {
      if (!mention) return;

      if (mention.startsWith("<@") && mention.endsWith(">")) {
        mention = mention.slice(2, -1);

        if (mention.startsWith("!")) {
          mention = mention.slice(1);
        }

        return client.users.cache.get(mention);
      }
    }

    if (args.length == 2) {
      if (getUserFromMention(args[0]) !== undefined) {
        if (
          moment().subtract(7, `days`).toDate() >=
          message.guild.member(getUserFromMention(args[0])).joinedAt
        ) {
          var artist = getUserFromMention(args[0]);
          if (args[1] == `pixel`) {
            var pixpar = client.channels.cache.get(`728572686258798662`);
            message.guild.channels
              .create(`${artist.username} portfolio`, { parent: pixpar })
              .then((newchannel) => {
                newchannel.lockPermissions();
                newchannel.overwritePermissions(
                  newchannel.parent.permissionOverwrites.array().concat([
                    {
                      id: artist.id,
                      allow: [
                        `VIEW_CHANNEL`,
                        `SEND_MESSAGES`,
                        `EMBED_LINKS`,
                        `ATTACH_FILES`,
                        `ADD_REACTIONS`,
                        `USE_EXTERNAL_EMOJIS`,
                        `READ_MESSAGE_HISTORY`,
                      ],
                      deny: [`MENTION_EVERYONE`],
                    },
                  ])
                );
              });
          } else if (args[1] == `traditional` || args[1] == `digital`) {
            var dtpar = client.channels.cache.get(`728572822066036798`);
            message.guild.channels
              .create(`${artist.username} portfolio`, { parent: dtpar })
              .then((newchannel) => {
                newchannel.lockPermissions();
                newchannel.overwritePermissions(
                  newchannel.parent.permissionOverwrites.array().concat([
                    {
                      id: artist.id,
                      allow: [
                        `VIEW_CHANNEL`,
                        `SEND_MESSAGES`,
                        `EMBED_LINKS`,
                        `ATTACH_FILES`,
                        `ADD_REACTIONS`,
                        `USE_EXTERNAL_EMOJIS`,
                        `READ_MESSAGE_HISTORY`,
                      ],
                      deny: [`MENTION_EVERYONE`],
                    },
                  ])
                );
              });
          } else if (args[1] == `writing` || args[1] == `music`) {
            var wmpar = client.channels.cache.get(`772235028075380756`);
            message.guild.channels
              .create(`${artist.username} portfolio`, { parent: wmpar })
              .then((newchannel) => {
                newchannel.lockPermissions();
                newchannel.overwritePermissions(
                  newchannel.parent.permissionOverwrites.array().concat([
                    {
                      id: artist.id,
                      allow: [
                        `VIEW_CHANNEL`,
                        `SEND_MESSAGES`,
                        `EMBED_LINKS`,
                        `ATTACH_FILES`,
                        `ADD_REACTIONS`,
                        `USE_EXTERNAL_EMOJIS`,
                        `READ_MESSAGE_HISTORY`,
                      ],
                      deny: [`MENTION_EVERYONE`],
                    },
                  ])
                );
              });
          } else {
            message.channel
              .send(
                `The \`${args[1]}\` is not a real category! Re-check the category, the following are the only valid categories \`pixel\`, \`traditional\`, \`digital\`, \`writing\`, \`music\`.`
              )
              .then((notcat) => {
                notcat.delete({ timeout: 5000 });
              });
          }
        } else {
          message.channel
            .send(
              `User \`${
                message.guild.member(getUserFromMention(args[0])).nickname
              }\` is not 7 days old!\nThey joined \`${moment(
                message.guild.member(getUserFromMention(args[0])).joinedAt
              ).fromNow()}\`.\nRe-check, and retry.`
            )
            .then((notold) => {
              notold.delete({ timeout: 5000 });
            });
        }
      } else {
        message.channel
          .send(
            `The \`mentioned\` user is not a real user! re-check the mention, and try again.`
          )
          .then((notuser) => {
            notuser.delete({ timeout: 5000 });
          });
      }
    } else {
      message.channel
        .send(
          `Not enough argument is provided for command: \`porto\`! Please retry.`
        )
        .then((notenuf) => {
          notenuf.delete({ timeout: 5000 });
        });
    }
  } else if (command == `gib`) {
    if (args.length == 1) {
      var parsed = encodeURIComponent(args[0]);
      var saucembed;
      if (isImageUrl(args[0]) == true) {
        saucembed = new Discord.MessageEmbed()
          .setColor(`#D4A0A7`)
          .setTitle(`🍑 SAUCE 🍑`)
          .setDescription(`Here's **SAUCE**`)
          .addField(
            `Hab some soz lmao.\nAniwae, here's thingy provided:`,
            `${args[0]}\n\n**Results:**\n══ ══ ══ ════ ══ ══ ══\n\n`
          )
          .addField(
            `\u200b`,
            `[**Yandex**](https://yandex.com/images/search?url=${parsed}&rpt=imageview)\n\n`
          )
          .addField(
            `\u200b`,
            `[**Google**](https://www.google.com/searchbyimage?&image_url=${parsed})\n\n`
          )
          .addField(
            `\u200b`,
            `[**TinEye**](https://www.tineye.com/search?url=${parsed})\n\n`
          )
          .addField(
            `\u200b`,
            `[**SauceNAO**](https://saucenao.com/search.php?url=${parsed})\n\n`
          )
          .addField(
            `\u200b`,
            `[**IQDB**](https://iqdb.org/?url=${parsed})\n\n══ ══ ══ ════ ══ ══ ══\n\n`
          )
          .setTimestamp()
          .setFooter(
            `Art Union, Fart Onion \nthis content was generated by a bot, so uh, don't reply to it ig lmao`,
            "https://i.imgur.com/yW3w6m4.gif"
          )
          .setAuthor("Art Union", "https://i.imgur.com/yW3w6m4.gif")
          .setThumbnail(args[0]);
      } else {
        saucembed = `The link you provided isn't an image! Please try again.`;
      }
      message.channel.send(saucembed);
      console.log(`${message.author.tag} searched for: ${args[0]}`);
    } else if (message.attachments.array().length > 0) {
      var parsed = encodeURIComponent(message.attachments.array()[0].url);
      var saucembed = new Discord.MessageEmbed()
        .setColor(`#D4A0A7`)
        .setTitle(`🍑 SAUCE 🍑`)
        .setDescription(`Here's **SAUCE**`)
        .setThumbnail(message.attachments.array()[0].url)
        .addField(
          `Hab some soz lmao.\nAniwae, here's thingy provided:`,
          `${
            message.attachments.array()[0].url
          }\n\n**Results:**\n══ ══ ══ ════ ══ ══ ══\n\n`
        )
        .addField(
          `\u200b`,
          `[**Yandex**](https://yandex.com/images/search?url=${parsed}&rpt=imageview)\n\n`
        )
        .addField(
          `\u200b`,
          `[**Google**](https://www.google.com/searchbyimage?&image_url=${parsed})\n\n`
        )
        .addField(
          `\u200b`,
          `[**TinEye**](https://www.tineye.com/search?url=${parsed})\n\n`
        )
        .addField(
          `\u200b`,
          `[**SauceNAO**](https://saucenao.com/search.php?url=${parsed})\n\n`
        )
        .addField(
          `\u200b`,
          `[**IQDB**](https://iqdb.org/?url=${parsed})\n\n══ ══ ══ ════ ══ ══ ══\n\n`
        )
        .setTimestamp()
        .setFooter(
          `Art Union, Fart Onion \nthis content was generated by a bot, so uh, don't reply to it ig lmao`,
          "https://i.imgur.com/yW3w6m4.gif"
        )
        .setAuthor("Art Union", "https://i.imgur.com/yW3w6m4.gif");
      message.channel.send(saucembed);
      console.log(
        `${message.author.tag} searched for: ${
          message.attachments.array()[0].url
        }`
      );
    } else if (args.length <= 0) {
      message.channel.send(
        `Not enough argument is provided for command: \`gib\`!\nSyntax is as follows: \`kek!gib <url or nothing, but attach image>\` Please retry.`
      );
    } else {
      message.channel.send(
        `Too many arguments is provided for command: \`gib\`! Please only gib one.`
      );
    }
  } else if (command == "dailyhelp") {
    message.channel.send(
      'how to do dis daily thingy (Must be done in this order else it might break, why did I not set up a failsafe? Well I did, just uh, not sure how well theyd work >.>):\n\n1. Do **kek!setdailydur <the-number-of-days-you-want-it-to-go-on-for>**\n\n2. Set up when it gets uploaded tomorrow with **kek!setdailytime <Current hour (just the hour, in 24h format)> <When you want it to be posted tomorrow (just the hour, in 24h format)>**\n\n3. Do **kek!setdailytheme <themelist>**, list the themes like this, "theme one, theme two" so on and so forth, or just "theme one" if youre queuing for tomorrow only\n\n4. Do **kek!dailystart <currentdate optional, if starting from the middle of the month> <currentmonth> <year> <thechannelid> <optional, but the role id for daily pings>**' +
        "\n\n5. Watch shit happen ig >.>" +
        '\n\n ***Do "kek!dailyexample" for an example***' +
        '\n\n ***Do "kek!dailyexample middle" for an example on how to set up in the middle of the month***\n\n\n(Do note that there' +
        "'" +
        "s a caveat to this; ***Its hosted on a fuken phone lmao***\nand uh, I could simplify the setup system, but that" +
        "'" +
        "ll take time and I ned to shove this feature up kekbot" +
        "'" +
        "s a" +
        "**" +
        " asap so here ye go fn.\nSoon it" +
        "'" +
        "ll only be 2 commands probably.... hoepfully ;-;)"
    );
  } else if (command == "dailyexample") {
    if (args.length >= 1) {
      example = args[0];
      if (example.includes("middle")) {
        message.channel.send(
          '\n heres an example:\n\n**kek!setdailydur 7**\n\n**kek!setdailytime 21 3**\n\n**kek!setdailytheme kekboi, sucks, at coding in javascript, why the fek is he coding, welcome, to, smmo code union**\n\n**kek!startdaily 25 October 2005 channelidhere roleidhere**\n\n This will set up a daily that starts on the 25th (25th is tomorrow, today is 24th) of October 2005 and will stop on the 31st (7 days from the 25th)\n\n If you wanna set it up in the middle of the month until the end of the month, then keep going till the end of next month, change the dailydur to (today till end of the month + next month), then change the startdaily to "<currentdate> <endofthemonth> <month> <year>"\n\n\n' +
            "example; **kek!setdailydur 37**\n\n**kek!setdailytime 21 3**\n\n**kek!setdailytheme <Imagine there is 37 themes here >.>>**\n\n**kek!startdaily 25 31 October 2005 channelidhere roleidhere**\n\n this will set it up so that it starts from the 25th, then go to 31st, then keep going from the 1st of November up to the end of November"
        );
      }
    } else {
      message.channel.send(
        "\n heres an example:\n\n**kek!setdailydur 7**\n\n**kek!setdailytime 21 3**\n\n**kek!setdailytheme kekboi, sucks, at coding in javascript, why the fek is he coding, welcome, to, smmo code union**\n\n**kek!startdaily October 2005 channelidhere roleidhere**\n\nThis example will set up a daily at 9 pm in the channel specified that will get posted for 7 days, with each post getting posted at around 3 am your (or mine ig) time evridae.\nTo queue up just for tomorrow, just replace the setdailydur to 1, (add a currentdate to startdaily if starting from middle of the month), and list only one theme."
      );
      return;
    }
  } else if (command == "setdailydur") {
    monthtime = args[0];
    if (!monthtime) {
      message.reply(
        'It goes like this "kek!setdailydur <the-number-of-days-you-want-it-to-go-on-for>"'
      );
      monthtime = 0;
      return;
    }
  } else if (command == "setdailytheme") {
    console.log(monthtime);
    currentarray = splitreq.toString();
    currentarray = currentarray.replace("setdailytheme", "").trim();
    currentarray = currentarray.split(",");
    themesarray = currentarray;
    console.log(themesarray.length);
    console.log(themesarray);
    if (themesarray.length != monthtime) {
      message.reply(
        "Your theme list is longer or shorter than the number of days that you wanted this to go on for >.> reset it with kek!setdailydur <the-number-of-days-you-want-it-to-go-on-for>"
      );
      themes = 0;
      return;
    }
    if (!monthtime) {
      message.reply(
        "Your date thingy's invalid >.> reset it with kek!setdailydur <the-number-of-days-you-want-it-to-go-on-for>"
      );
      return;
    }
    if (!time) {
      message.reply(
        "Your intervals isnt set >.> Set your daily intervals with kek!setdailytime <Current hour (just the hour, in 24h format)> <When you want it to be posted tomorrow (just the hour, in 24h format)>"
      );
      return;
    }
  } else if (command == "setdailytime") {
    currenttime = args[0];
    postime = args[1];
    if (currenttime > 24) {
      message.reply("in 24 hour format ples");
      return;
    }
    if (postime > 24) {
      message.reply("in 24 hour format ples");
      return;
    }
    timeseries = 0;
    time = 24 * 3600000 - currenttime * 3600000 + postime * 3600000;
    console.log("delytim: " + time);
  } else if (command == "testdaily") {
    var currentdate;
    var embedid;
    if (args.length == 5) {
      currentdate = args[0];
      month = args[1];
      year = args[2];
      channelid = args[3];
      tag = args[4];
    } else if (args.length == 6) {
      currentdate = args[0];
      endofthemonth = args[1];
      month = args[2];
      year = args[3];
      channelid = args[4];
      tag = args[5];
    } else if (args.length == 7) {
      currentdate = args[0];
      endofthemonth = args[1];
      month = args[2];
      year = args[3];
      channelid = args[4];
      rulechan = args[5];
      tag = args[6];
    } else {
      month = args[0];
      year = args[1];
      channelid = args[2];
      tag = args[3];
    }
    peepoltag = "<@&" + tag + ">";
    time = time / 6000;
    console.log("testing daily: " + time);
    var postboipleb = function () {
      timetfh = 24 * 600;
      time = timetfh;
      console.log("verified: " + time);
      seriestring = series;
      currentrequest = themesarray[0];
      seriestring = series.toString();
      seriesarray = seriestring.split("");
      switch (seriesarray[seriesarray.length - 1]) {
        case "1":
          dateprefix = "st";
          break;
        case "3":
          dateprefix = "rd";
          break;
        case "2":
          dateprefix = "nd";
          break;
        default:
          dateprefix = "th";
          break;
      }
      if (seriesarray[seriesarray.length - 2] == "1") {
        dateprefix = "th";
      }
      series = seriesarray.join("");
      series = parseInt(series, 10);
      date = series;
      if (!currentrequest) {
        return;
      }
      if (currentdate) {
        date = currentdate;
        datestring = date.toString();
        datearray = datestring.split("");
        switch (datearray[datearray.length - 1]) {
          case "1":
            dateprefix = "st";
            break;
          case "3":
            dateprefix = "rd";
            break;
          case "2":
            dateprefix = "nd";
            break;
          default:
            dateprefix = "th";
            break;
        }
        if (datearray[datearray.length - 2] == "1") {
          dateprefix = "th";
        }
        date = datearray.join("");
        date = parseInt(date, 10);
        currentdate = parseInt(currentdate, 10);
        currentdate += 1;
        if (endofthemonth) {
          if (currentdate > endofthemonth) {
            currentdate = 1;
            setTimeout(Monthver, 500);
          }
        }
        if (!endofthemonth && currentdate > monthtime) {
          currentdate = 1;
        }
      }
      currentreqarray = currentrequest.split("");
      onecharreq = currentreqarray[0].toUpperCase();
      currentreqarray[0] = onecharreq;
      currentrequest = currentreqarray.join("");
      const plebdaily = new Discord.MessageEmbed()
        .setColor("#ecb96f")
        .setTitle(
          "══ ══ ══ ✧ ══ ══ ══ \n<:oborodeception:805851491956293642> Daily Challenge <:oborodeception:805851491956293642>\n ══ ══ ══ ✧ ══ ══ ══"
        )
        .setThumbnail("https://i.imgur.com/yW3w6m4.gif")
        .setDescription(
          "<:aquacrylmao:805796037822382091> Your daily dose of torture <:aquacrylmao:805796037822382091>"
        )
        .addField("\u200b", "\u200b")
        .addFields(
          {
            name: date + dateprefix + " " + "of" + " " + month + " " + year,
            value: "\u200b",
          },
          { name: "Daily Request", value: "Details are listed below \u200b" },
          {
            name: "***Today's request: " + currentrequest + "***",
            value: "\u200b",
          },
          { name: "Rewards", value: "10 <:pretzelpoint:776620853310914590>" },
          {
            name: "Additional",
            value:
              "100 <:pretzelpoint:776620853310914590> for the most daily posted in 1 month",
          },
          {
            name: `\u200b`,
            value: `If there's any tie, all of them gets the rewards`,
          }
        )
        .addField("\u200b", "\u200b")
        .addField(
          ":postbox: Let us know in #suggestions any ideas you have for a prompt! :postbox:",
          "\u200b"
        );
      const rulez = client.channels.cache.get(rulechan);
      const channel = message.guild.channels.cache.find((channel) =>
        channel.name.includes("daily")
      );
      const newchannel = client.channels.cache.get(channelid);
      var yesterday = moment().subtract(1, `days`);
      var promises = [];
      var capped = {};

      promises.push(
        newchannel.messages.fetch({ limit: 100 }).then((messages) => {
          if (messages.array().length > 0) {
            promises.push(
              messages.forEach((mssg) => {
                if (
                  mssg.attachments.array().length > 0 ||
                  mssg.content.split(`\n`).length >= 3 ||
                  mssg.content.includes(`http`) ||
                  mssg.content.includes(`https`) ||
                  mssg.content.includes(`www.`) ||
                  mssg.content.includes(`.com`)
                ) {
                  if (
                    mssg.createdAt.getDate() == yesterday.toDate().getDate()
                  ) {
                    if (!Object.keys(capped).includes(mssg.author.tag)) {
                      capped[
                        mssg.author.tag
                      ] = `p!add-money cash "${mssg.author.tag}" 10`;
                      function addMoney() {
                        var a = 0;
                        unb
                          .editUserBalance(mssg.guild.id, mssg.author.id, {
                            cash: 10,
                          })
                          .catch(() => {
                            if (a < 4) {
                              console.log(
                                `${new Date()}: adding money to ${
                                  mssg.author.tag
                                } failed! Retrying...`
                              );
                              a++;
                              addMoney();
                            } else {
                              console.log(
                                `${new Date()}: retry limit reached for adding money to ${
                                  mssg.author.tag
                                }!`
                              );
                            }
                          });
                      }
                      addMoney();
                    }
                  }
                }
              })
            );
          }
        })
      );
      Promise.all(promises).then(() => {
        client.guilds.cache.forEach((guild) => {
          guild.channels.cache.forEach((channel) => {
            if (channel.name.toLowerCase().includes(`recap`)) {
              var recapembed = new Discord.MessageEmbed()
                .setColor(`#C0FFEE`)
                .setTitle(
                  `${yesterday.toDate().getDate()}/${
                    yesterday.toDate().getMonth() + 1
                  }/${yesterday.toDate().getFullYear()}'s Daily Recap`
                )
                .setDescription(`Yeah, uh.... yea-`)
                .setTimestamp()
                .setFooter(
                  `Art Union, Fart Onion \nthis content was generated by a bot, so uh, don't reply to it ig lmao`,
                  "https://i.imgur.com/yW3w6m4.gif"
                )
                .setAuthor("Art Union", "https://i.imgur.com/yW3w6m4.gif");
              if (Object.keys(capped).length > 0) {
                recapembed.addField(
                  `══ ══ ══\nParticipants\n══ ══ ══`,
                  `${Object.keys(capped).join(`\n`)}`
                );
                if (Object.values(capped).join(`\n`).length <= 1024) {
                  recapembed.addField(
                    `══ ══ ══\nRewards\n══ ══ ══`,
                    `${Object.values(capped).join(`\n`)}`
                  );
                } else {
                  var cappedvals = Object.values(capped);
                  var firstval = cappedvals.shift();
                  recapembed.addField(
                    `══ ══ ══\nRewards\n══ ══ ══`,
                    `${firstval}`
                  );
                  cappedvals.forEach((cappedval) => {
                    recapembed.addField(`\u200b`, cappedval);
                  });
                }
              } else {
                recapembed.addField(
                  `══ ══ ══\nParticipants\n══ ══ ══`,
                  `No one joined lmao ;-;`
                );
                recapembed.addField(
                  `══ ══ ══\nRewards\n══ ══ ══`,
                  `No one joined lmao ;-;`
                );
              }
              channel.send(recapembed);
              if (Object.keys(capped).length > 0) {
                channel.send(
                  `Raw for mobile:\n\n${Object.keys(capped).join(`\n`)}`,
                  { split: `\n` }
                );
                channel.send(
                  `\n\nRaw rewards:\n\n${Object.values(capped).join(`\n`)}`,
                  { split: `\n` }
                );
              }
            }
          });
        });
      });

      newchannel.send(plebdaily);
      if (rulechan && !embedid) {
        rulez.send(plebdaily).then((rulembed) => {
          embedid = rulembed.id;
        });
      }
      if (embedid) {
        client.channels.cache
          .get(rulechan)
          .messages.fetch(embedid)
          .then((rulesent) => {
            rulesent.edit(plebdaily);
          });
      }
      if (tag) {
        newchannel.send(
          ":ping_pong: ping pong " + peepoltag + " lmao :ping_pong:"
        );
      }
      series += 1;
      themesarray.shift();
      console.log(series);
      if (!endofthemonth && series > monthtime) {
        series = 1;
        return;
      }

      setTimeout(postboipleb, time);
    };
    if (time == 0) {
      message.reply("set the time with kek!setdailytime");
      console.log("setdaily cancelled lol");
      return;
    } else if (!time) {
      message.reply("set the time with kek!setdailytime");
      console.log("setdaily cancelled lol");
      return;
    } else if (!channelid) {
      message.reply("You forgot the channel id lmao.");
      logger.write(
        "\r\n" +
          message.author.id +
          " " +
          message.author.username +
          " " +
          " forgot to add the channel id lmao"
      );
      console.log(
        message.author.id +
          " " +
          message.author.username +
          " " +
          " forgot to add the channel id lmao"
      );
      console.log("setdaily cancelled lol");
      return;
    } else {
      setTimeout(postboipleb, time);
    }
  } else if (command == "startdaily") {
    var currentdate;
    var embedid;
    console.log("starting daily: " + time);
    if (args.length == 5) {
      currentdate = args[0];
      month = args[1];
      year = args[2];
      channelid = args[3];
      tag = args[4];
    } else if (args.length == 6) {
      currentdate = args[0];
      endofthemonth = args[1];
      month = args[2];
      year = args[3];
      channelid = args[4];
      tag = args[5];
    } else if (args.length == 7) {
      currentdate = args[0];
      endofthemonth = args[1];
      month = args[2];
      year = args[3];
      channelid = args[4];
      rulechan = args[5];
      tag = args[6];
    } else {
      month = args[0];
      year = args[1];
      channelid = args[2];
      tag = args[3];
    }
    peepoltag = "<@&" + tag + ">";
    var postboipleb = function () {
      timetfh = 24 * 3600000;
      time = timetfh;
      console.log("verified: " + time);
      seriestring = series;
      currentrequest = themesarray[0];
      seriestring = series.toString();
      seriesarray = seriestring.split("");
      switch (seriesarray[seriesarray.length - 1]) {
        case "1":
          dateprefix = "st";
          break;
        case "3":
          dateprefix = "rd";
          break;
        case "2":
          dateprefix = "nd";
          break;
        default:
          dateprefix = "th";
          break;
      }
      if (seriesarray[seriesarray.length - 2] == "1") {
        dateprefix = "th";
      }
      series = seriesarray.join("");
      series = parseInt(series, 10);
      date = series;
      if (!currentrequest) {
        return;
      }
      if (currentdate) {
        date = currentdate;
        datestring = date.toString();
        datearray = datestring.split("");
        switch (datearray[datearray.length - 1]) {
          case "1":
            dateprefix = "st";
            break;
          case "3":
            dateprefix = "rd";
            break;
          case "2":
            dateprefix = "nd";
            break;
          default:
            dateprefix = "th";
            break;
        }
        if (datearray[datearray.length - 2] == "1") {
          dateprefix = "th";
        }
        date = datearray.join("");
        date = parseInt(date, 10);
        currentdate = parseInt(currentdate, 10);
        currentdate += 1;
        if (endofthemonth) {
          if (currentdate > endofthemonth) {
            currentdate = 1;
            setTimeout(Monthver, 500);
          }
        }
        if (!endofthemonth && currentdate > monthtime) {
          currentdate = 1;
        }
      }
      currentreqarray = currentrequest.split("");
      onecharreq = currentreqarray[0].toUpperCase();
      currentreqarray[0] = onecharreq;
      currentrequest = currentreqarray.join("");
      const plebdaily = new Discord.MessageEmbed()
        .setColor("#ecb96f")
        .setTitle(
          "══ ══ ══ ✧ ══ ══ ══ \n<:oborodeception:805851491956293642> Daily Challenge <:oborodeception:805851491956293642>\n ══ ══ ══ ✧ ══ ══ ══"
        )
        .setThumbnail("https://i.imgur.com/yW3w6m4.gif")
        .setDescription(
          "<:aquacrylmao:805796037822382091> Your daily dose of torture <:aquacrylmao:805796037822382091>"
        )
        .addField("\u200b", "\u200b")
        .addFields(
          {
            name: date + dateprefix + " " + "of" + " " + month + " " + year,
            value: "\u200b",
          },
          { name: "Daily Request", value: "Details are listed below \u200b" },
          {
            name: "***Today's request: " + currentrequest + "***",
            value: "\u200b",
          },
          { name: "Rewards", value: "10 <:pretzelpoint:776620853310914590>" },
          {
            name: "Additional",
            value:
              "100 <:pretzelpoint:776620853310914590> for the most daily posted in 1 month",
          },
          {
            name: `\u200b`,
            value: `If there's any tie, all of them gets the rewards`,
          }
        )
        .addField("\u200b", "\u200b")
        .addField(
          ":postbox: Let us know in #suggestions any ideas you have for a prompt! :postbox:",
          "\u200b"
        );
      const rulez = client.channels.cache.get(rulechan);
      const channel = message.guild.channels.cache.find((channel) =>
        channel.name.includes("daily")
      );
      const newchannel = client.channels.cache.get(channelid);
      var yesterday = moment().subtract(1, `days`);
      var promises = [];
      var capped = {};

      promises.push(
        newchannel.messages.fetch({ limit: 100 }).then((messages) => {
          if (messages.array().length > 0) {
            promises.push(
              messages.forEach((mssg) => {
                if (
                  mssg.attachments.array().length > 0 ||
                  mssg.content.split(`\n`).length >= 3 ||
                  mssg.content.includes(`http`) ||
                  mssg.content.includes(`https`) ||
                  mssg.content.includes(`www.`) ||
                  mssg.content.includes(`.com`)
                ) {
                  if (
                    mssg.createdAt.getDate() == yesterday.toDate().getDate()
                  ) {
                    if (!Object.keys(capped).includes(mssg.author.tag)) {
                      capped[
                        mssg.author.tag
                      ] = `p!add-money cash "${mssg.author.tag}" 10`;
                      function addMoney() {
                        var a = 0;
                        unb
                          .editUserBalance(mssg.guild.id, mssg.author.id, {
                            cash: 10,
                          })
                          .catch(() => {
                            if (a < 4) {
                              console.log(
                                `${new Date()}: adding money to ${
                                  mssg.author.tag
                                } failed! Retrying...`
                              );
                              a++;
                              addMoney();
                            } else {
                              console.log(
                                `${new Date()}: retry limit reached for adding money to ${
                                  mssg.author.tag
                                }!`
                              );
                            }
                          });
                      }
                      addMoney();
                    }
                  }
                }
              })
            );
          }
        })
      );
      Promise.all(promises).then(() => {
        client.guilds.cache.forEach((guild) => {
          guild.channels.cache.forEach((channel) => {
            if (channel.name.toLowerCase().includes(`recap`)) {
              var recapembed = new Discord.MessageEmbed()
                .setColor(`#C0FFEE`)
                .setTitle(
                  `${yesterday.toDate().getDate()}/${
                    yesterday.toDate().getMonth() + 1
                  }/${yesterday.toDate().getFullYear()}'s Daily Recap`
                )
                .setDescription(`Yeah, uh.... yea-`)
                .setTimestamp()
                .setFooter(
                  `Art Union, Fart Onion \nthis content was generated by a bot, so uh, don't reply to it ig lmao`,
                  "https://i.imgur.com/yW3w6m4.gif"
                )
                .setAuthor("Art Union", "https://i.imgur.com/yW3w6m4.gif");
              if (Object.keys(capped).length > 0) {
                recapembed.addField(
                  `══ ══ ══\nParticipants\n══ ══ ══`,
                  `${Object.keys(capped).join(`\n`)}`
                );
                if (Object.values(capped).join(`\n`).length <= 1024) {
                  recapembed.addField(
                    `══ ══ ══\nRewards\n══ ══ ══`,
                    `${Object.values(capped).join(`\n`)}`
                  );
                } else {
                  var cappedvals = Object.values(capped);
                  var firstval = cappedvals.shift();
                  recapembed.addField(
                    `══ ══ ══\nRewards\n══ ══ ══`,
                    `${firstval}`
                  );
                  cappedvals.forEach((cappedval) => {
                    recapembed.addField(`\u200b`, cappedval);
                  });
                }
              } else {
                recapembed.addField(
                  `══ ══ ══\nParticipants\n══ ══ ══`,
                  `No one joined lmao ;-;`
                );
                recapembed.addField(
                  `══ ══ ══\nRewards\n══ ══ ══`,
                  `No one joined lmao ;-;`
                );
              }
              channel.send(recapembed);
              if (Object.keys(capped).length > 0) {
                channel.send(
                  `Raw for mobile:\n\n${Object.keys(capped).join(`\n`)}`,
                  { split: `\n` }
                );
                channel.send(
                  `\n\nRaw rewards:\n\n${Object.values(capped).join(`\n`)}`,
                  { split: `\n` }
                );
              }
            }
          });
        });
      });

      newchannel.send(plebdaily);
      if (rulechan && !embedid) {
        rulez.send(plebdaily).then((rulembed) => {
          embedid = rulembed.id;
        });
      }
      if (embedid) {
        client.channels.cache
          .get(rulechan)
          .messages.fetch(embedid)
          .then((rulesent) => {
            rulesent.edit(plebdaily);
          });
      }
      if (tag) {
        newchannel.send(
          ":ping_pong: ping pong " + peepoltag + " lmao :ping_pong:"
        );
      }
      series += 1;
      themesarray.shift();
      console.log(series);
      if (!endofthemonth && series > monthtime) {
        series = 1;
        return;
      }

      setTimeout(postboipleb, time);
    };
    if (time == 0) {
      message.reply("set the time with kek!setdailytime");
      console.log("setdaily cancelled lol");
      return;
    } else if (!time) {
      message.reply("set the time with kek!setdailytime");
      console.log("setdaily cancelled lol");
      return;
    } else if (!channelid) {
      message.reply("You forgot the channel id lmao.");
      logger.write(
        "\r\n" +
          message.author.id +
          " " +
          message.author.username +
          " " +
          " forgot to add the channel id lmao"
      );
      console.log(
        message.author.id +
          " " +
          message.author.username +
          " " +
          " forgot to add the channel id lmao"
      );
      console.log("setdaily cancelled lol");
      return;
    } else {
      setTimeout(postboipleb, time);
    }
  } else if (command == "starttoday") {
    var currentdate;
    var embedid;
    realtime = args[0];
    posttime = args[1];
    currentdate = args[2];
    endofthemonth = args[3];
    month = args[4];
    year = args[5];
    channelid = args[6];
    rulechan = args[7];
    tag = args[8];
    time = (posttime - realtime) * 3600000;
    console.log("starting daily: " + time);
    peepoltag = "<@&" + tag + ">";
    var postboipleb = function () {
      timetfh = 24 * 3600000;
      time = timetfh;
      console.log("verified: " + time);
      seriestring = series;
      currentrequest = themesarray[0];
      seriestring = series.toString();
      seriesarray = seriestring.split("");
      switch (seriesarray[seriesarray.length - 1]) {
        case "1":
          dateprefix = "st";
          break;
        case "3":
          dateprefix = "rd";
          break;
        case "2":
          dateprefix = "nd";
          break;
        default:
          dateprefix = "th";
          break;
      }
      if (seriesarray[seriesarray.length - 2] == "1") {
        dateprefix = "th";
      }
      series = seriesarray.join("");
      series = parseInt(series, 10);
      date = series;
      if (!currentrequest) {
        return;
      }
      if (currentdate) {
        date = currentdate;
        datestring = date.toString();
        datearray = datestring.split("");
        switch (datearray[datearray.length - 1]) {
          case "1":
            dateprefix = "st";
            break;
          case "3":
            dateprefix = "rd";
            break;
          case "2":
            dateprefix = "nd";
            break;
          default:
            dateprefix = "th";
            break;
        }
        if (datearray[datearray.length - 2] == "1") {
          dateprefix = "th";
        }
        date = datearray.join("");
        date = parseInt(date, 10);
        currentdate = parseInt(currentdate, 10);
        currentdate += 1;
        if (endofthemonth) {
          if (currentdate > endofthemonth) {
            currentdate = 1;
            setTimeout(Monthver, 500);
          }
        }
        if (!endofthemonth && currentdate > monthtime) {
          currentdate = 1;
        }
      }
      currentreqarray = currentrequest.split("");
      onecharreq = currentreqarray[0].toUpperCase();
      currentreqarray[0] = onecharreq;
      currentrequest = currentreqarray.join("");
      const plebdaily = new Discord.MessageEmbed()
        .setColor("#ecb96f")
        .setTitle(
          "══ ══ ══ ✧ ══ ══ ══ \n<:oborodeception:805851491956293642> Daily Challenge <:oborodeception:805851491956293642>\n ══ ══ ══ ✧ ══ ══ ══"
        )
        .setThumbnail("https://i.imgur.com/yW3w6m4.gif")
        .setDescription(
          "<:aquacrylmao:805796037822382091> Your daily dose of torture <:aquacrylmao:805796037822382091>"
        )
        .addField("\u200b", "\u200b")
        .addFields(
          {
            name: date + dateprefix + " " + "of" + " " + month + " " + year,
            value: "\u200b",
          },
          { name: "Daily Request", value: "Details are listed below \u200b" },
          {
            name: "***Today's request: " + currentrequest + "***",
            value: "\u200b",
          },
          { name: "Rewards", value: "10 <:pretzelpoint:776620853310914590>" },
          {
            name: "Additional",
            value:
              "100 <:pretzelpoint:776620853310914590> for the most daily posted in 1 month",
          },
          {
            name: `\u200b`,
            value: `If there's any tie, all of them gets the rewards`,
          }
        )
        .addField("\u200b", "\u200b")
        .addField(
          ":postbox: Let us know in #suggestions any ideas you have for a prompt! :postbox:",
          "\u200b"
        );
      const rulez = client.channels.cache.get(rulechan);
      const channel = message.guild.channels.cache.find((channel) =>
        channel.name.includes("daily")
      );
      const newchannel = client.channels.cache.get(channelid);
      var yesterday = moment().subtract(1, `days`);
      var promises = [];
      var capped = {};

      promises.push(
        newchannel.messages.fetch({ limit: 100 }).then((messages) => {
          if (messages.array().length > 0) {
            promises.push(
              messages.forEach((mssg) => {
                if (
                  mssg.attachments.array().length > 0 ||
                  mssg.content.split(`\n`).length >= 3 ||
                  mssg.content.includes(`http`) ||
                  mssg.content.includes(`https`) ||
                  mssg.content.includes(`www.`) ||
                  mssg.content.includes(`.com`)
                ) {
                  if (
                    mssg.createdAt.getDate() == yesterday.toDate().getDate()
                  ) {
                    if (!Object.keys(capped).includes(mssg.author.tag)) {
                      capped[
                        mssg.author.tag
                      ] = `p!add-money cash "${mssg.author.tag}" 10`;
                      function addMoney() {
                        var a = 0;
                        unb
                          .editUserBalance(mssg.guild.id, mssg.author.id, {
                            cash: 10,
                          })
                          .catch(() => {
                            if (a < 4) {
                              console.log(
                                `${new Date()}: adding money to ${
                                  mssg.author.tag
                                } failed! Retrying...`
                              );
                              a++;
                              addMoney();
                            } else {
                              console.log(
                                `${new Date()}: retry limit reached for adding money to ${
                                  mssg.author.tag
                                }!`
                              );
                            }
                          });
                      }
                      addMoney();
                    }
                  }
                }
              })
            );
          }
        })
      );
      Promise.all(promises).then(() => {
        client.guilds.cache.forEach((guild) => {
          guild.channels.cache.forEach((channel) => {
            if (channel.name.toLowerCase().includes(`recap`)) {
              var recapembed = new Discord.MessageEmbed()
                .setColor(`#C0FFEE`)
                .setTitle(
                  `${yesterday.toDate().getDate()}/${
                    yesterday.toDate().getMonth() + 1
                  }/${yesterday.toDate().getFullYear()}'s Daily Recap`
                )
                .setDescription(`Yeah, uh.... yea-`)
                .setTimestamp()
                .setFooter(
                  `Art Union, Fart Onion \nthis content was generated by a bot, so uh, don't reply to it ig lmao`,
                  "https://i.imgur.com/yW3w6m4.gif"
                )
                .setAuthor("Art Union", "https://i.imgur.com/yW3w6m4.gif");
              if (Object.keys(capped).length > 0) {
                recapembed.addField(
                  `══ ══ ══\nParticipants\n══ ══ ══`,
                  `${Object.keys(capped).join(`\n`)}`
                );
                if (Object.values(capped).join(`\n`).length <= 1024) {
                  recapembed.addField(
                    `══ ══ ══\nRewards\n══ ══ ══`,
                    `${Object.values(capped).join(`\n`)}`
                  );
                } else {
                  var cappedvals = Object.values(capped);
                  var firstval = cappedvals.shift();
                  recapembed.addField(
                    `══ ══ ══\nRewards\n══ ══ ══`,
                    `${firstval}`
                  );
                  cappedvals.forEach((cappedval) => {
                    recapembed.addField(`\u200b`, cappedval);
                  });
                }
              } else {
                recapembed.addField(
                  `══ ══ ══\nParticipants\n══ ══ ══`,
                  `No one joined lmao ;-;`
                );
                recapembed.addField(
                  `══ ══ ══\nRewards\n══ ══ ══`,
                  `No one joined lmao ;-;`
                );
              }
              channel.send(recapembed);
              if (Object.keys(capped).length > 0) {
                channel.send(
                  `Raw for mobile:\n\n${Object.keys(capped).join(`\n`)}`,
                  { split: `\n` }
                );
                channel.send(
                  `\n\nRaw rewards:\n\n${Object.values(capped).join(`\n`)}`,
                  { split: `\n` }
                );
              }
            }
          });
        });
      });

      newchannel.send(plebdaily);
      if (rulechan && !embedid) {
        rulez.send(plebdaily).then((rulembed) => {
          embedid = rulembed.id;
        });
      }
      if (embedid) {
        client.channels.cache
          .get(rulechan)
          .messages.fetch(embedid)
          .then((rulesent) => {
            rulesent.edit(plebdaily);
          });
      }
      if (tag) {
        newchannel.send(
          ":ping_pong: ping pong " + peepoltag + " lmao :ping_pong:"
        );
      }
      series += 1;
      themesarray.shift();
      console.log(series);
      if (!endofthemonth && series > monthtime) {
        series = 1;
        return;
      }

      setTimeout(postboipleb, time);
    };
    if (time == 0) {
      message.reply("set the time with kek!setdailytime");
      console.log("setdaily cancelled lol");
      return;
    } else if (!time) {
      message.reply("set the time with kek!setdailytime");
      console.log("setdaily cancelled lol");
      return;
    } else if (!channelid) {
      message.reply("You forgot the channel id lmao.");
      logger.write(
        "\r\n" +
          message.author.id +
          " " +
          message.author.username +
          " " +
          " forgot to add the channel id lmao"
      );
      console.log(
        message.author.id +
          " " +
          message.author.username +
          " " +
          " forgot to add the channel id lmao"
      );
      console.log("setdaily cancelled lol");
      return;
    } else {
      setTimeout(postboipleb, time);
    }
  }
});
